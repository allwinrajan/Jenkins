
Case Study: Achieving Continuous Integration (CI) with Jenkins on a Local Machine Using ngrok

This guide provides a comprehensive step-by-step process to implement Continuous Integration (CI) using Jenkins hosted on a local machine and exposed to the internet using ngrok.


---

Step 1: Install Jenkins

1. Install and Start Jenkins

Ensure Jenkins is installed on your local machine.

Access Jenkins by opening your browser and navigating to:
http://localhost:8080.

If this is your first time setting up Jenkins:

Unlock Jenkins using the password found in the initialAdminPassword file.

Install suggested plugins when prompted.



2. Install Necessary Plugins

Navigate to Manage Jenkins > Manage Plugins.

Install the following plugins (if not already installed):

Git Plugin

GitHub Plugin

Pipeline Plugin




---

Step 2: Install ngrok

1. Download ngrok

Visit ngrok download page and download the appropriate version for your operating system.


2. Unzip and Install ngrok

For Linux/macOS:

unzip ngrok-stable-linux-amd64.zip
sudo mv ngrok /usr/local/bin

For Windows:

Extract the downloaded file and add it to your systemâ€™s PATH environment variable.



3. Authenticate ngrok

Create a free account on ngrok.com.

Obtain your authentication token from your ngrok dashboard.

Authenticate ngrok using the following command:

ngrok config add-authtoken YOUR_AUTH_TOKEN



---

Step 3: Expose Jenkins to the Internet

1. Start ngrok

Run the following command to expose Jenkins:

ngrok http 8080

Note the public URL generated by ngrok (e.g., https://abc123.ngrok.io). This URL will forward traffic to your local Jenkins server.



---

Step 4: Update Jenkins URL

1. Access Jenkins Configuration

Go to Jenkins via http://localhost:8080.

Navigate to Manage Jenkins > Configure System.


2. Update Jenkins URL

Replace the default Jenkins URL (http://localhost:8080) with the public URL provided by ngrok (e.g., https://abc123.ngrok.io).

Click Save to apply the changes.



---

Step 5: Configure GitHub Repository

1. Access Webhooks in GitHub

Go to your GitHub repository.

Navigate to Settings > Webhooks > Add webhook.


2. Configure Webhook

Set the Payload URL to:
https://abc123.ngrok.io/github-webhook/

Set the Content type to application/json.

Select the events to trigger the webhook (e.g., push events).

Click Add webhook to save.



---

Step 6: Set Up a Jenkins Job

1. Create a New Job in Jenkins

From Jenkins dashboard, click New Item.

Choose either a Freestyle Project or Pipeline Project.


2. Configure Job for Freestyle Project

In the Source Code Management section:

Select Git and provide your repository URL.

Add credentials if required.


In the Build Triggers section:

Check GitHub hook trigger for GITScm polling.



3. Configure Job for Pipeline Project

Create a Jenkinsfile in your repository to define the pipeline script.

Reference the repository and branch containing the Jenkinsfile in the Jenkins job configuration.



---

Step 7: Test the CI Pipeline

1. Push Changes to GitHub

Make a code change (e.g., update a file) and push it to the GitHub repository.


2. Verify the Webhook and Jenkins Pipeline

The webhook will notify Jenkins, triggering the CI pipeline.

Jenkins will fetch the latest code, execute the pipeline, and display the build results.



---

Step 8: Secure the Setup (Optional but Recommended)

1. Restrict Jenkins Access

Enable authentication for Jenkins by navigating to Manage Jenkins > Configure Global Security.

Set up user credentials and roles.


2. Secure GitHub Credentials

Use Jenkins Credentials Manager to securely store GitHub access tokens or SSH keys.


3. Protect Your Local Server

Use a firewall or VPN to limit access to your local machine.



---

Conclusion

This step-by-step guide demonstrates how to set up Continuous Integration (CI) with Jenkins on a local machine while using ngrok to enable internet access. This setup is ideal for testing and learning CI concepts but should be secured and optimized before use in a production environment.

